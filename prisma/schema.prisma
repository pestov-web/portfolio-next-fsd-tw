datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PRIVATE
}

enum Role {
  USER
  AUTHOR
  FRIEND
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Article[]  
  comments      Comment[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String
  excerpt     String?
  status      ArticleStatus @default(DRAFT)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  tags        ArticleTags[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  articles    ArticleTags[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// Модель для связи многие-ко-многим между статьями и тегами
model ArticleTags {
  article     Article    @relation(fields: [articleId], references: [id])
  articleId   String
  tag         Tag        @relation(fields: [tagId], references: [id])
  tagId       String
  createdAt   DateTime   @default(now())

  @@id([articleId, tagId])
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  article     Article    @relation(fields: [articleId], references: [id])
  articleId   String
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  // Добавляем обратную связь для вложенных комментариев
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies     Comment[]  @relation("CommentReplies")
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}